
DSP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003860  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a00  08003a00  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a08  08003a08  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08003a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000091c4  20000050  08003a60  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009214  08003a60  00029214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ef5  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000192b  00000000  00000000  00027f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d8  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  00029f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fee0  00000000  00000000  0002a568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000735a  00000000  00000000  0004a448  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0c34  00000000  00000000  000517a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001123d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019dc  00000000  00000000  001124c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00001229  00000000  00000000  00113ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039d0 	.word	0x080039d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	080039d0 	.word	0x080039d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92b 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f002 fe18 	bl	8003130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f943 	bl	80007b6 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90b 	bl	8000762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000004c 	.word	0x2000004c
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000070 	.word	0x20000070

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000070 	.word	0x20000070

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff8e 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff29 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff3e 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff8e 	bl	80006a0 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <__NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff31 	bl	8000610 <__NVIC_EnableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffa2 	bl	8000708 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff feda 	bl	8000594 <HAL_GetTick>
 80007e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	e099      	b.n	8000920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2202      	movs	r2, #2
 80007f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0201 	bic.w	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800080c:	e00f      	b.n	800082e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800080e:	f7ff fec1 	bl	8000594 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	2b05      	cmp	r3, #5
 800081a:	d908      	bls.n	800082e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2220      	movs	r2, #32
 8000820:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2203      	movs	r2, #3
 8000826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800082a:	2303      	movs	r3, #3
 800082c:	e078      	b.n	8000920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1e8      	bne.n	800080e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <HAL_DMA_Init+0x158>)
 8000848:	4013      	ands	r3, r2
 800084a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800085a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	4313      	orrs	r3, r2
 800087e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000884:	2b04      	cmp	r3, #4
 8000886:	d107      	bne.n	8000898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4313      	orrs	r3, r2
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f023 0307 	bic.w	r3, r3, #7
 80008ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d117      	bne.n	80008f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00e      	beq.n	80008f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 fa77 	bl	8000dc8 <DMA_CheckFifoParam>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d008      	beq.n	80008f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2240      	movs	r2, #64	; 0x40
 80008e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80008ee:	2301      	movs	r3, #1
 80008f0:	e016      	b.n	8000920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f000 fa2e 	bl	8000d5c <DMA_CalcBaseAndBitshift>
 8000900:	4603      	mov	r3, r0
 8000902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000908:	223f      	movs	r2, #63	; 0x3f
 800090a:	409a      	lsls	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	f010803f 	.word	0xf010803f

0800092c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800094a:	2b01      	cmp	r3, #1
 800094c:	d101      	bne.n	8000952 <HAL_DMA_Start_IT+0x26>
 800094e:	2302      	movs	r3, #2
 8000950:	e048      	b.n	80009e4 <HAL_DMA_Start_IT+0xb8>
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b01      	cmp	r3, #1
 8000964:	d137      	bne.n	80009d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2202      	movs	r2, #2
 800096a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 f9c0 	bl	8000d00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000984:	223f      	movs	r2, #63	; 0x3f
 8000986:	409a      	lsls	r2, r3
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f042 0216 	orr.w	r2, r2, #22
 800099a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	695a      	ldr	r2, [r3, #20]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d007      	beq.n	80009c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f042 0208 	orr.w	r2, r2, #8
 80009c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0201 	orr.w	r2, r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e005      	b.n	80009e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009de:	2302      	movs	r3, #2
 80009e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009f8:	4b92      	ldr	r3, [pc, #584]	; (8000c44 <HAL_DMA_IRQHandler+0x258>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a92      	ldr	r2, [pc, #584]	; (8000c48 <HAL_DMA_IRQHandler+0x25c>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	0a9b      	lsrs	r3, r3, #10
 8000a04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a16:	2208      	movs	r2, #8
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d01a      	beq.n	8000a58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d013      	beq.n	8000a58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f022 0204 	bic.w	r2, r2, #4
 8000a3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a44:	2208      	movs	r2, #8
 8000a46:	409a      	lsls	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4013      	ands	r3, r2
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d012      	beq.n	8000a8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00b      	beq.n	8000a8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	409a      	lsls	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a86:	f043 0202 	orr.w	r2, r3, #2
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a92:	2204      	movs	r2, #4
 8000a94:	409a      	lsls	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d012      	beq.n	8000ac4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00b      	beq.n	8000ac4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000abc:	f043 0204 	orr.w	r2, r3, #4
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac8:	2210      	movs	r2, #16
 8000aca:	409a      	lsls	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d043      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d03c      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d018      	beq.n	8000b2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d108      	bne.n	8000b1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d024      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	4798      	blx	r3
 8000b1a:	e01f      	b.n	8000b5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d01b      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	4798      	blx	r3
 8000b2c:	e016      	b.n	8000b5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d107      	bne.n	8000b4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f022 0208 	bic.w	r2, r2, #8
 8000b4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b60:	2220      	movs	r2, #32
 8000b62:	409a      	lsls	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4013      	ands	r3, r2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 808e 	beq.w	8000c8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 8086 	beq.w	8000c8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b82:	2220      	movs	r2, #32
 8000b84:	409a      	lsls	r2, r3
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b05      	cmp	r3, #5
 8000b94:	d136      	bne.n	8000c04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0216 	bic.w	r2, r2, #22
 8000ba4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <HAL_DMA_IRQHandler+0x1da>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 0208 	bic.w	r2, r2, #8
 8000bd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bda:	223f      	movs	r2, #63	; 0x3f
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d07d      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	4798      	blx	r3
        }
        return;
 8000c02:	e078      	b.n	8000cf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01c      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d108      	bne.n	8000c32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d030      	beq.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	4798      	blx	r3
 8000c30:	e02b      	b.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d027      	beq.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	4798      	blx	r3
 8000c42:	e022      	b.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
 8000c44:	2000004c 	.word	0x2000004c
 8000c48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10f      	bne.n	8000c7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0210 	bic.w	r2, r2, #16
 8000c68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d032      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d022      	beq.n	8000ce4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d307      	bcc.n	8000cd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f2      	bne.n	8000cb6 <HAL_DMA_IRQHandler+0x2ca>
 8000cd0:	e000      	b.n	8000cd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000cd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	4798      	blx	r3
 8000cf4:	e000      	b.n	8000cf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cf6:	bf00      	nop
    }
  }
}
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop

08000d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b40      	cmp	r3, #64	; 0x40
 8000d2c:	d108      	bne.n	8000d40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d3e:	e007      	b.n	8000d50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	60da      	str	r2, [r3, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3b10      	subs	r3, #16
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d76:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d909      	bls.n	8000d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d92:	f023 0303 	bic.w	r3, r3, #3
 8000d96:	1d1a      	adds	r2, r3, #4
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8000d9c:	e007      	b.n	8000dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000da6:	f023 0303 	bic.w	r3, r3, #3
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	aaaaaaab 	.word	0xaaaaaaab
 8000dc4:	080039e8 	.word	0x080039e8

08000dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d11f      	bne.n	8000e22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d855      	bhi.n	8000e94 <DMA_CheckFifoParam+0xcc>
 8000de8:	a201      	add	r2, pc, #4	; (adr r2, 8000df0 <DMA_CheckFifoParam+0x28>)
 8000dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dee:	bf00      	nop
 8000df0:	08000e01 	.word	0x08000e01
 8000df4:	08000e13 	.word	0x08000e13
 8000df8:	08000e01 	.word	0x08000e01
 8000dfc:	08000e95 	.word	0x08000e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d045      	beq.n	8000e98 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e10:	e042      	b.n	8000e98 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e1a:	d13f      	bne.n	8000e9c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e20:	e03c      	b.n	8000e9c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e2a:	d121      	bne.n	8000e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d836      	bhi.n	8000ea0 <DMA_CheckFifoParam+0xd8>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <DMA_CheckFifoParam+0x70>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e4f 	.word	0x08000e4f
 8000e40:	08000e49 	.word	0x08000e49
 8000e44:	08000e61 	.word	0x08000e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8000e4c:	e02f      	b.n	8000eae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d024      	beq.n	8000ea4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e5e:	e021      	b.n	8000ea4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e68:	d11e      	bne.n	8000ea8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e6e:	e01b      	b.n	8000ea8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d902      	bls.n	8000e7c <DMA_CheckFifoParam+0xb4>
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d003      	beq.n	8000e82 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e7a:	e018      	b.n	8000eae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e80:	e015      	b.n	8000eae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00e      	beq.n	8000eac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
      break;
 8000e92:	e00b      	b.n	8000eac <DMA_CheckFifoParam+0xe4>
      break;
 8000e94:	bf00      	nop
 8000e96:	e00a      	b.n	8000eae <DMA_CheckFifoParam+0xe6>
      break;
 8000e98:	bf00      	nop
 8000e9a:	e008      	b.n	8000eae <DMA_CheckFifoParam+0xe6>
      break;
 8000e9c:	bf00      	nop
 8000e9e:	e006      	b.n	8000eae <DMA_CheckFifoParam+0xe6>
      break;
 8000ea0:	bf00      	nop
 8000ea2:	e004      	b.n	8000eae <DMA_CheckFifoParam+0xe6>
      break;
 8000ea4:	bf00      	nop
 8000ea6:	e002      	b.n	8000eae <DMA_CheckFifoParam+0xe6>
      break;   
 8000ea8:	bf00      	nop
 8000eaa:	e000      	b.n	8000eae <DMA_CheckFifoParam+0xe6>
      break;
 8000eac:	bf00      	nop
    }
  } 
  
  return status; 
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	; 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	e16b      	b.n	80011b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 815a 	bne.w	80011aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x4a>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d123      	bne.n	8000f4e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	69b9      	ldr	r1, [r7, #24]
 8000f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0203 	and.w	r2, r3, #3
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d00b      	beq.n	8000fa2 <HAL_GPIO_Init+0xe6>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f96:	2b11      	cmp	r3, #17
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80b4 	beq.w	80011aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <HAL_GPIO_Init+0x308>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a5e      	ldr	r2, [pc, #376]	; (80011c4 <HAL_GPIO_Init+0x308>)
 800104c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b5c      	ldr	r3, [pc, #368]	; (80011c4 <HAL_GPIO_Init+0x308>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105e:	4a5a      	ldr	r2, [pc, #360]	; (80011c8 <HAL_GPIO_Init+0x30c>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	220f      	movs	r2, #15
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_GPIO_Init+0x310>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d02b      	beq.n	80010e2 <HAL_GPIO_Init+0x226>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a50      	ldr	r2, [pc, #320]	; (80011d0 <HAL_GPIO_Init+0x314>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d025      	beq.n	80010de <HAL_GPIO_Init+0x222>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x318>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01f      	beq.n	80010da <HAL_GPIO_Init+0x21e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_GPIO_Init+0x31c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x21a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x320>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x216>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_GPIO_Init+0x324>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x212>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_GPIO_Init+0x328>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x20e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4a      	ldr	r2, [pc, #296]	; (80011e8 <HAL_GPIO_Init+0x32c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x20a>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e00e      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010c6:	2308      	movs	r3, #8
 80010c8:	e00c      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00a      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010ce:	2305      	movs	r3, #5
 80010d0:	e008      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x228>
 80010e2:	2300      	movs	r3, #0
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f4:	4934      	ldr	r1, [pc, #208]	; (80011c8 <HAL_GPIO_Init+0x30c>)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_GPIO_Init+0x330>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001126:	4a31      	ldr	r2, [pc, #196]	; (80011ec <HAL_GPIO_Init+0x330>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_GPIO_Init+0x330>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001150:	4a26      	ldr	r2, [pc, #152]	; (80011ec <HAL_GPIO_Init+0x330>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_GPIO_Init+0x330>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <HAL_GPIO_Init+0x330>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_GPIO_Init+0x330>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a4:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_GPIO_Init+0x330>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	f67f ae90 	bls.w	8000ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b8:	bf00      	nop
 80011ba:	3724      	adds	r7, #36	; 0x24
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40013800 	.word	0x40013800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40021400 	.word	0x40021400
 80011e4:	40021800 	.word	0x40021800
 80011e8:	40021c00 	.word	0x40021c00
 80011ec:	40013c00 	.word	0x40013c00

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800120c:	e003      	b.n	8001216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e128      	b.n	8001488 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a90      	ldr	r2, [pc, #576]	; (8001490 <HAL_I2S_Init+0x26c>)
 800124e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f001 ff95 	bl	8003180 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2202      	movs	r2, #2
 800125a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800126c:	f023 030f 	bic.w	r3, r3, #15
 8001270:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2202      	movs	r2, #2
 8001278:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d060      	beq.n	8001344 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800128a:	2310      	movs	r3, #16
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e001      	b.n	8001294 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001290:	2320      	movs	r3, #32
 8001292:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b20      	cmp	r3, #32
 800129a:	d802      	bhi.n	80012a2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f001 fba6 	bl	80029f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80012a8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b2:	d125      	bne.n	8001300 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d010      	beq.n	80012de <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	3305      	adds	r3, #5
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	e01f      	b.n	800131e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	461a      	mov	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	3305      	adds	r3, #5
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	e00e      	b.n	800131e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fbb2 f2f3 	udiv	r2, r2, r3
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	3305      	adds	r3, #5
 800131c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <HAL_I2S_Init+0x270>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	085b      	lsrs	r3, r3, #1
 800133a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	e003      	b.n	800134c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001344:	2302      	movs	r3, #2
 8001346:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d902      	bls.n	8001358 <HAL_I2S_Init+0x134>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2bff      	cmp	r3, #255	; 0xff
 8001356:	d907      	bls.n	8001368 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	f043 0210 	orr.w	r2, r3, #16
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e08f      	b.n	8001488 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	ea42 0103 	orr.w	r1, r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	430a      	orrs	r2, r1
 800137a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001386:	f023 030f 	bic.w	r3, r3, #15
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6851      	ldr	r1, [r2, #4]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6892      	ldr	r2, [r2, #8]
 8001392:	4311      	orrs	r1, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	68d2      	ldr	r2, [r2, #12]
 8001398:	4311      	orrs	r1, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6992      	ldr	r2, [r2, #24]
 800139e:	430a      	orrs	r2, r1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013aa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d161      	bne.n	8001478 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a38      	ldr	r2, [pc, #224]	; (8001498 <HAL_I2S_Init+0x274>)
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a37      	ldr	r2, [pc, #220]	; (800149c <HAL_I2S_Init+0x278>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_I2S_Init+0x1a4>
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_I2S_Init+0x27c>)
 80013c6:	e001      	b.n	80013cc <HAL_I2S_Init+0x1a8>
 80013c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	4932      	ldr	r1, [pc, #200]	; (800149c <HAL_I2S_Init+0x278>)
 80013d4:	428a      	cmp	r2, r1
 80013d6:	d101      	bne.n	80013dc <HAL_I2S_Init+0x1b8>
 80013d8:	4a31      	ldr	r2, [pc, #196]	; (80014a0 <HAL_I2S_Init+0x27c>)
 80013da:	e001      	b.n	80013e0 <HAL_I2S_Init+0x1bc>
 80013dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80013e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80013e4:	f023 030f 	bic.w	r3, r3, #15
 80013e8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <HAL_I2S_Init+0x278>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d101      	bne.n	80013f8 <HAL_I2S_Init+0x1d4>
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_I2S_Init+0x27c>)
 80013f6:	e001      	b.n	80013fc <HAL_I2S_Init+0x1d8>
 80013f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013fc:	2202      	movs	r2, #2
 80013fe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a25      	ldr	r2, [pc, #148]	; (800149c <HAL_I2S_Init+0x278>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_I2S_Init+0x1ea>
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <HAL_I2S_Init+0x27c>)
 800140c:	e001      	b.n	8001412 <HAL_I2S_Init+0x1ee>
 800140e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800141e:	d003      	beq.n	8001428 <HAL_I2S_Init+0x204>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e001      	b.n	8001434 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	b299      	uxth	r1, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800144a:	4303      	orrs	r3, r0
 800144c:	b29b      	uxth	r3, r3
 800144e:	430b      	orrs	r3, r1
 8001450:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001452:	4313      	orrs	r3, r2
 8001454:	b29a      	uxth	r2, r3
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	4313      	orrs	r3, r2
 800145a:	b29b      	uxth	r3, r3
 800145c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001460:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_I2S_Init+0x278>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_I2S_Init+0x24c>
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_I2S_Init+0x27c>)
 800146e:	e001      	b.n	8001474 <HAL_I2S_Init+0x250>
 8001470:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001474:	897a      	ldrh	r2, [r7, #10]
 8001476:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0800159b 	.word	0x0800159b
 8001494:	cccccccd 	.word	0xcccccccd
 8001498:	080019c5 	.word	0x080019c5
 800149c:	40003800 	.word	0x40003800
 80014a0:	40003400 	.word	0x40003400

080014a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	1c9a      	adds	r2, r3, #2
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10e      	bne.n	8001534 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001524:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffb8 	bl	80014a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	b292      	uxth	r2, r2
 8001550:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	1c9a      	adds	r2, r3, #2
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001560:	b29b      	uxth	r3, r3
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800156e:	b29b      	uxth	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10e      	bne.n	8001592 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001582:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff93 	bl	80014b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d13a      	bne.n	800162c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d109      	bne.n	80015d4 <I2S_IRQHandler+0x3a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ca:	2b40      	cmp	r3, #64	; 0x40
 80015cc:	d102      	bne.n	80015d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffb4 	bl	800153c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015da:	2b40      	cmp	r3, #64	; 0x40
 80015dc:	d126      	bne.n	800162c <I2S_IRQHandler+0x92>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d11f      	bne.n	800162c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80015fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f043 0202 	orr.w	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff50 	bl	80014cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b03      	cmp	r3, #3
 8001636:	d136      	bne.n	80016a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d109      	bne.n	8001656 <I2S_IRQHandler+0xbc>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164c:	2b80      	cmp	r3, #128	; 0x80
 800164e:	d102      	bne.n	8001656 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff45 	bl	80014e0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b08      	cmp	r3, #8
 800165e:	d122      	bne.n	80016a6 <I2S_IRQHandler+0x10c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	2b20      	cmp	r3, #32
 800166c:	d11b      	bne.n	80016a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800167c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	f043 0204 	orr.w	r2, r3, #4
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff13 	bl	80014cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d002      	beq.n	80016dc <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80016da:	e160      	b.n	800199e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e15a      	b.n	80019a8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80016fe:	2302      	movs	r3, #2
 8001700:	e152      	b.n	80019a8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d002      	beq.n	800172e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d114      	bne.n	8001758 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	865a      	strh	r2, [r3, #50]	; 0x32
 8001756:	e00b      	b.n	8001770 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	887a      	ldrh	r2, [r7, #2]
 8001762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	887a      	ldrh	r2, [r7, #2]
 800176e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2205      	movs	r2, #5
 800177a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	4a8b      	ldr	r2, [pc, #556]	; (80019b0 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8001784:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	4a8a      	ldr	r2, [pc, #552]	; (80019b4 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 800178c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001792:	4a89      	ldr	r2, [pc, #548]	; (80019b8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8001794:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179a:	4a85      	ldr	r2, [pc, #532]	; (80019b0 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 800179c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	4a84      	ldr	r2, [pc, #528]	; (80019b4 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80017a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	4a83      	ldr	r2, [pc, #524]	; (80019b8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80017ac:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017b8:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c0:	d002      	beq.n	80017c8 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d16b      	bne.n	80018a0 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a79      	ldr	r2, [pc, #484]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80017da:	4b79      	ldr	r3, [pc, #484]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80017dc:	e001      	b.n	80017e2 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80017de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017e2:	330c      	adds	r3, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f7ff f89c 	bl	800092c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a70      	ldr	r2, [pc, #448]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80017fe:	4b70      	ldr	r3, [pc, #448]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001800:	e001      	b.n	8001806 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8001802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	496b      	ldr	r1, [pc, #428]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800180e:	428b      	cmp	r3, r1
 8001810:	d101      	bne.n	8001816 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8001812:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001814:	e001      	b.n	800181a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8001816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	6819      	ldr	r1, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	330c      	adds	r3, #12
 8001834:	461a      	mov	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183a:	b29b      	uxth	r3, r3
 800183c:	f7ff f876 	bl	800092c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0202 	orr.w	r2, r2, #2
 800184e:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	f000 809e 	beq.w	800199e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a55      	ldr	r2, [pc, #340]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 800186c:	4b54      	ldr	r3, [pc, #336]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800186e:	e001      	b.n	8001874 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8001870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4950      	ldr	r1, [pc, #320]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800187c:	428b      	cmp	r3, r1
 800187e:	d101      	bne.n	8001884 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8001880:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001882:	e001      	b.n	8001888 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8001884:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800188c:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800189c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800189e:	e07e      	b.n	800199e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018ae:	d10a      	bne.n	80018c6 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a38      	ldr	r2, [pc, #224]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80018e0:	e001      	b.n	80018e6 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80018e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018e6:	330c      	adds	r3, #12
 80018e8:	461a      	mov	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f7ff f81c 	bl	800092c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a30      	ldr	r2, [pc, #192]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80018fe:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001900:	e001      	b.n	8001906 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8001902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	492b      	ldr	r1, [pc, #172]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800190e:	428b      	cmp	r3, r1
 8001910:	d101      	bne.n	8001916 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8001912:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001914:	e001      	b.n	800191a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8001916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800191a:	f042 0202 	orr.w	r2, r2, #2
 800191e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	330c      	adds	r3, #12
 800192e:	4619      	mov	r1, r3
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001938:	b29b      	uxth	r3, r3
 800193a:	f7fe fff7 	bl	800092c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	d01e      	beq.n	800199c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800196a:	e001      	b.n	8001970 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 800196c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4911      	ldr	r1, [pc, #68]	; (80019bc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001978:	428b      	cmp	r3, r1
 800197a:	d101      	bne.n	8001980 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800197e:	e001      	b.n	8001984 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8001980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001988:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001998:	61da      	str	r2, [r3, #28]
 800199a:	e000      	b.n	800199e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 800199c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80019a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	08001c6d 	.word	0x08001c6d
 80019b4:	08001c89 	.word	0x08001c89
 80019b8:	08001dc1 	.word	0x08001dc1
 80019bc:	40003800 	.word	0x40003800
 80019c0:	40003400 	.word	0x40003400

080019c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4aa2      	ldr	r2, [pc, #648]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80019de:	4ba2      	ldr	r3, [pc, #648]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80019e0:	e001      	b.n	80019e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80019e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a9b      	ldr	r2, [pc, #620]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80019fc:	4b9a      	ldr	r3, [pc, #616]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80019fe:	e001      	b.n	8001a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a10:	d004      	beq.n	8001a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 8099 	bne.w	8001b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d107      	bne.n	8001a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fa05 	bl	8001e40 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 faa8 	bl	8001fa0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a56:	2b40      	cmp	r3, #64	; 0x40
 8001a58:	d13a      	bne.n	8001ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f003 0320 	and.w	r3, r3, #32
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d035      	beq.n	8001ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a7e      	ldr	r2, [pc, #504]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001a6e:	4b7e      	ldr	r3, [pc, #504]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a70:	e001      	b.n	8001a76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4979      	ldr	r1, [pc, #484]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a7e:	428b      	cmp	r3, r1
 8001a80:	d101      	bne.n	8001a86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001a82:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a84:	e001      	b.n	8001a8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a8e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0202 	orr.w	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fcfe 	bl	80014cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	f040 80be 	bne.w	8001c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80b8 	beq.w	8001c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001af6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a59      	ldr	r2, [pc, #356]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b02:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b04:	e001      	b.n	8001b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4954      	ldr	r1, [pc, #336]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b12:	428b      	cmp	r3, r1
 8001b14:	d101      	bne.n	8001b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001b16:	4b54      	ldr	r3, [pc, #336]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b18:	e001      	b.n	8001b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b22:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f043 0204 	orr.w	r2, r3, #4
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fcc0 	bl	80014cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b4c:	e084      	b.n	8001c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d107      	bne.n	8001b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f99e 	bl	8001ea4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d107      	bne.n	8001b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f9dd 	bl	8001f3c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b88:	2b40      	cmp	r3, #64	; 0x40
 8001b8a:	d12f      	bne.n	8001bec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d02a      	beq.n	8001bec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ba4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a2e      	ldr	r2, [pc, #184]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d101      	bne.n	8001bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001bb2:	e001      	b.n	8001bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4929      	ldr	r1, [pc, #164]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001bc4:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001bc6:	e001      	b.n	8001bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bd0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f043 0202 	orr.w	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fc70 	bl	80014cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d131      	bne.n	8001c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d02c      	beq.n	8001c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c0c:	e001      	b.n	8001c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4912      	ldr	r1, [pc, #72]	; (8001c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c1a:	428b      	cmp	r3, r1
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c20:	e001      	b.n	8001c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001c22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c3a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	f043 0204 	orr.w	r2, r3, #4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fc3b 	bl	80014cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c56:	e000      	b.n	8001c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c58:	bf00      	nop
}
 8001c5a:	bf00      	nop
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40003800 	.word	0x40003800
 8001c68:	40003400 	.word	0x40003400

08001c6c <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f001 f81c 	bl	8002cb8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 8084 	bne.w	8001da8 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d13c      	bne.n	8001d24 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb8:	d006      	beq.n	8001cc8 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d116      	bne.n	8001cf6 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a3a      	ldr	r2, [pc, #232]	; (8001db8 <I2SEx_TxRxDMACplt+0x130>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <I2SEx_TxRxDMACplt+0x4e>
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <I2SEx_TxRxDMACplt+0x134>)
 8001cd4:	e001      	b.n	8001cda <I2SEx_TxRxDMACplt+0x52>
 8001cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4935      	ldr	r1, [pc, #212]	; (8001db8 <I2SEx_TxRxDMACplt+0x130>)
 8001ce2:	428b      	cmp	r3, r1
 8001ce4:	d101      	bne.n	8001cea <I2SEx_TxRxDMACplt+0x62>
 8001ce6:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <I2SEx_TxRxDMACplt+0x134>)
 8001ce8:	e001      	b.n	8001cee <I2SEx_TxRxDMACplt+0x66>
 8001cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	e007      	b.n	8001d06 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 ffda 	bl	8002cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d13c      	bne.n	8001da8 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	d006      	beq.n	8001d4c <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d108      	bne.n	8001d5e <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0202 	bic.w	r2, r2, #2
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	e015      	b.n	8001d8a <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <I2SEx_TxRxDMACplt+0x130>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <I2SEx_TxRxDMACplt+0xe4>
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <I2SEx_TxRxDMACplt+0x134>)
 8001d6a:	e001      	b.n	8001d70 <I2SEx_TxRxDMACplt+0xe8>
 8001d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4910      	ldr	r1, [pc, #64]	; (8001db8 <I2SEx_TxRxDMACplt+0x130>)
 8001d78:	428b      	cmp	r3, r1
 8001d7a:	d101      	bne.n	8001d80 <I2SEx_TxRxDMACplt+0xf8>
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <I2SEx_TxRxDMACplt+0x134>)
 8001d7e:	e001      	b.n	8001d84 <I2SEx_TxRxDMACplt+0xfc>
 8001d80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d84:	f022 0202 	bic.w	r2, r2, #2
 8001d88:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 ff98 	bl	8002cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 ff95 	bl	8002cd8 <HAL_I2SEx_TxRxCpltCallback>
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40003800 	.word	0x40003800
 8001dbc:	40003400 	.word	0x40003400

08001dc0 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0203 	bic.w	r2, r2, #3
 8001ddc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <I2SEx_TxRxDMAError+0x78>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <I2SEx_TxRxDMAError+0x2c>
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <I2SEx_TxRxDMAError+0x7c>)
 8001dea:	e001      	b.n	8001df0 <I2SEx_TxRxDMAError+0x30>
 8001dec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4910      	ldr	r1, [pc, #64]	; (8001e38 <I2SEx_TxRxDMAError+0x78>)
 8001df8:	428b      	cmp	r3, r1
 8001dfa:	d101      	bne.n	8001e00 <I2SEx_TxRxDMAError+0x40>
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <I2SEx_TxRxDMAError+0x7c>)
 8001dfe:	e001      	b.n	8001e04 <I2SEx_TxRxDMAError+0x44>
 8001e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e04:	f022 0203 	bic.w	r2, r2, #3
 8001e08:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0208 	orr.w	r2, r3, #8
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7ff fb4e 	bl	80014cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40003800 	.word	0x40003800
 8001e3c:	40003400 	.word	0x40003400

08001e40 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	1c99      	adds	r1, r3, #2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6251      	str	r1, [r2, #36]	; 0x24
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d113      	bne.n	8001e9a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e80:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 ff1f 	bl	8002cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	1c99      	adds	r1, r3, #2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6251      	str	r1, [r2, #36]	; 0x24
 8001eb6:	8819      	ldrh	r1, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <I2SEx_TxISR_I2SExt+0x90>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <I2SEx_TxISR_I2SExt+0x22>
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <I2SEx_TxISR_I2SExt+0x94>)
 8001ec4:	e001      	b.n	8001eca <I2SEx_TxISR_I2SExt+0x26>
 8001ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eca:	460a      	mov	r2, r1
 8001ecc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d121      	bne.n	8001f2a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <I2SEx_TxISR_I2SExt+0x90>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <I2SEx_TxISR_I2SExt+0x50>
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <I2SEx_TxISR_I2SExt+0x94>)
 8001ef2:	e001      	b.n	8001ef8 <I2SEx_TxISR_I2SExt+0x54>
 8001ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	490d      	ldr	r1, [pc, #52]	; (8001f34 <I2SEx_TxISR_I2SExt+0x90>)
 8001f00:	428b      	cmp	r3, r1
 8001f02:	d101      	bne.n	8001f08 <I2SEx_TxISR_I2SExt+0x64>
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <I2SEx_TxISR_I2SExt+0x94>)
 8001f06:	e001      	b.n	8001f0c <I2SEx_TxISR_I2SExt+0x68>
 8001f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d106      	bne.n	8001f2a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fed7 	bl	8002cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40003800 	.word	0x40003800
 8001f38:	40003400 	.word	0x40003400

08001f3c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68d8      	ldr	r0, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	1c99      	adds	r1, r3, #2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001f54:	b282      	uxth	r2, r0
 8001f56:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d113      	bne.n	8001f98 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f7e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fea0 	bl	8002cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a20      	ldr	r2, [pc, #128]	; (8002030 <I2SEx_RxISR_I2SExt+0x90>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <I2SEx_RxISR_I2SExt+0x16>
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <I2SEx_RxISR_I2SExt+0x94>)
 8001fb4:	e001      	b.n	8001fba <I2SEx_RxISR_I2SExt+0x1a>
 8001fb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fba:	68d8      	ldr	r0, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	1c99      	adds	r1, r3, #2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001fc6:	b282      	uxth	r2, r0
 8001fc8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d121      	bne.n	8002026 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <I2SEx_RxISR_I2SExt+0x90>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <I2SEx_RxISR_I2SExt+0x50>
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <I2SEx_RxISR_I2SExt+0x94>)
 8001fee:	e001      	b.n	8001ff4 <I2SEx_RxISR_I2SExt+0x54>
 8001ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	490d      	ldr	r1, [pc, #52]	; (8002030 <I2SEx_RxISR_I2SExt+0x90>)
 8001ffc:	428b      	cmp	r3, r1
 8001ffe:	d101      	bne.n	8002004 <I2SEx_RxISR_I2SExt+0x64>
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <I2SEx_RxISR_I2SExt+0x94>)
 8002002:	e001      	b.n	8002008 <I2SEx_RxISR_I2SExt+0x68>
 8002004:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002008:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800200c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d106      	bne.n	8002026 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fe59 	bl	8002cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40003800 	.word	0x40003800
 8002034:	40003400 	.word	0x40003400

08002038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e22d      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d075      	beq.n	8002142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002056:	4ba3      	ldr	r3, [pc, #652]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b04      	cmp	r3, #4
 8002060:	d00c      	beq.n	800207c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4ba0      	ldr	r3, [pc, #640]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206a:	2b08      	cmp	r3, #8
 800206c:	d112      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b9d      	ldr	r3, [pc, #628]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207a:	d10b      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	4b99      	ldr	r3, [pc, #612]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d05b      	beq.n	8002140 <HAL_RCC_OscConfig+0x108>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d157      	bne.n	8002140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e208      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x74>
 800209e:	4b91      	ldr	r3, [pc, #580]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a90      	ldr	r2, [pc, #576]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x98>
 80020b6:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a8a      	ldr	r2, [pc, #552]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a87      	ldr	r2, [pc, #540]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020d0:	4b84      	ldr	r3, [pc, #528]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a83      	ldr	r2, [pc, #524]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a80      	ldr	r2, [pc, #512]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe fa50 	bl	8000594 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7fe fa4c 	bl	8000594 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1cd      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0xc0>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe fa3c 	bl	8000594 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7fe fa38 	bl	8000594 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1b9      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	4b6c      	ldr	r3, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0xe8>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215a:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	4b5c      	ldr	r3, [pc, #368]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e18d      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4952      	ldr	r1, [pc, #328]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	e03a      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <HAL_RCC_OscConfig+0x2b0>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7fe f9f1 	bl	8000594 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7fe f9ed 	bl	8000594 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e16e      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4940      	ldr	r1, [pc, #256]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_RCC_OscConfig+0x2b0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe f9d0 	bl	8000594 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f8:	f7fe f9cc 	bl	8000594 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e14d      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d030      	beq.n	8002284 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCC_OscConfig+0x2b4>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7fe f9b0 	bl	8000594 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002238:	f7fe f9ac 	bl	8000594 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e12d      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x200>
 8002256:	e015      	b.n	8002284 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_OscConfig+0x2b4>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7fe f999 	bl	8000594 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002266:	f7fe f995 	bl	8000594 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e116      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80a0 	beq.w	80023d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10f      	bne.n	80022c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022be:	2301      	movs	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x2b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d121      	bne.n	8002312 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_RCC_OscConfig+0x2b8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <HAL_RCC_OscConfig+0x2b8>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022da:	f7fe f95b 	bl	8000594 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	e011      	b.n	8002306 <HAL_RCC_OscConfig+0x2ce>
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	42470000 	.word	0x42470000
 80022ec:	42470e80 	.word	0x42470e80
 80022f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f4:	f7fe f94e 	bl	8000594 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0cf      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d106      	bne.n	8002328 <HAL_RCC_OscConfig+0x2f0>
 800231a:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a65      	ldr	r2, [pc, #404]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6713      	str	r3, [r2, #112]	; 0x70
 8002326:	e01c      	b.n	8002362 <HAL_RCC_OscConfig+0x32a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b05      	cmp	r3, #5
 800232e:	d10c      	bne.n	800234a <HAL_RCC_OscConfig+0x312>
 8002330:	4b60      	ldr	r3, [pc, #384]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	4a5f      	ldr	r2, [pc, #380]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	6713      	str	r3, [r2, #112]	; 0x70
 800233c:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	4a5c      	ldr	r2, [pc, #368]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6713      	str	r3, [r2, #112]	; 0x70
 8002348:	e00b      	b.n	8002362 <HAL_RCC_OscConfig+0x32a>
 800234a:	4b5a      	ldr	r3, [pc, #360]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a59      	ldr	r2, [pc, #356]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d015      	beq.n	8002396 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7fe f913 	bl	8000594 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe f90f 	bl	8000594 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e08e      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ee      	beq.n	8002372 <HAL_RCC_OscConfig+0x33a>
 8002394:	e014      	b.n	80023c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7fe f8fd 	bl	8000594 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe f8f9 	bl	8000594 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e078      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ee      	bne.n	800239e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 80023cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d064      	beq.n	80024a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023da:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d05c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d141      	bne.n	8002472 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <HAL_RCC_OscConfig+0x480>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe f8ce 	bl	8000594 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe f8ca 	bl	8000594 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04b      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	3b01      	subs	r3, #1
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	491d      	ldr	r1, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <HAL_RCC_OscConfig+0x480>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe f8a3 	bl	8000594 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe f89f 	bl	8000594 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e020      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x41a>
 8002470:	e018      	b.n	80024a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_RCC_OscConfig+0x480>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe f88c 	bl	8000594 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe f888 	bl	8000594 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e009      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_RCC_OscConfig+0x47c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x448>
 800249e:	e001      	b.n	80024a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40007000 	.word	0x40007000
 80024b4:	40023800 	.word	0x40023800
 80024b8:	42470060 	.word	0x42470060

080024bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0ca      	b.n	8002666 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b67      	ldr	r3, [pc, #412]	; (8002670 <HAL_RCC_ClockConfig+0x1b4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d90c      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b64      	ldr	r3, [pc, #400]	; (8002670 <HAL_RCC_ClockConfig+0x1b4>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b62      	ldr	r3, [pc, #392]	; (8002670 <HAL_RCC_ClockConfig+0x1b4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b6      	b.n	8002666 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b58      	ldr	r3, [pc, #352]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a57      	ldr	r2, [pc, #348]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 8002516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800251a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b52      	ldr	r3, [pc, #328]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a51      	ldr	r2, [pc, #324]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494c      	ldr	r1, [pc, #304]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d044      	beq.n	80025dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b46      	ldr	r3, [pc, #280]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d119      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07d      	b.n	8002666 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d003      	beq.n	800257a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	2b03      	cmp	r3, #3
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06d      	b.n	8002666 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e065      	b.n	8002666 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259a:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f023 0203 	bic.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4933      	ldr	r1, [pc, #204]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ac:	f7fd fff2 	bl	8000594 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7fd ffee 	bl	8000594 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e04d      	b.n	8002666 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 020c 	and.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1eb      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCC_ClockConfig+0x1b4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d20c      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_RCC_ClockConfig+0x1b4>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_ClockConfig+0x1b4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e030      	b.n	8002666 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4915      	ldr	r1, [pc, #84]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490d      	ldr	r1, [pc, #52]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f81d 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 8002646:	4601      	mov	r1, r0
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	fa21 f303 	lsr.w	r3, r1, r3
 800265a:	4a08      	ldr	r2, [pc, #32]	; (800267c <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800265e:	2000      	movs	r0, #0
 8002660:	f7fd ff54 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00
 8002674:	40023800 	.word	0x40023800
 8002678:	080039f0 	.word	0x080039f0
 800267c:	2000004c 	.word	0x2000004c

08002680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	2300      	movs	r3, #0
 8002690:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d007      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x32>
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d008      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x38>
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 80b4 	bne.w	8002814 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b5e      	ldr	r3, [pc, #376]	; (8002828 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026ae:	60bb      	str	r3, [r7, #8]
       break;
 80026b0:	e0b3      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b2:	4b5e      	ldr	r3, [pc, #376]	; (800282c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80026b4:	60bb      	str	r3, [r7, #8]
      break;
 80026b6:	e0b0      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b8:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c2:	4b58      	ldr	r3, [pc, #352]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04a      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b55      	ldr	r3, [pc, #340]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	f04f 0400 	mov.w	r4, #0
 80026d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	ea03 0501 	and.w	r5, r3, r1
 80026e4:	ea04 0602 	and.w	r6, r4, r2
 80026e8:	4629      	mov	r1, r5
 80026ea:	4632      	mov	r2, r6
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	f04f 0400 	mov.w	r4, #0
 80026f4:	0154      	lsls	r4, r2, #5
 80026f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026fa:	014b      	lsls	r3, r1, #5
 80026fc:	4619      	mov	r1, r3
 80026fe:	4622      	mov	r2, r4
 8002700:	1b49      	subs	r1, r1, r5
 8002702:	eb62 0206 	sbc.w	r2, r2, r6
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f04f 0400 	mov.w	r4, #0
 800270e:	0194      	lsls	r4, r2, #6
 8002710:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002714:	018b      	lsls	r3, r1, #6
 8002716:	1a5b      	subs	r3, r3, r1
 8002718:	eb64 0402 	sbc.w	r4, r4, r2
 800271c:	f04f 0100 	mov.w	r1, #0
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	00e2      	lsls	r2, r4, #3
 8002726:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800272a:	00d9      	lsls	r1, r3, #3
 800272c:	460b      	mov	r3, r1
 800272e:	4614      	mov	r4, r2
 8002730:	195b      	adds	r3, r3, r5
 8002732:	eb44 0406 	adc.w	r4, r4, r6
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	0262      	lsls	r2, r4, #9
 8002740:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002744:	0259      	lsls	r1, r3, #9
 8002746:	460b      	mov	r3, r1
 8002748:	4614      	mov	r4, r2
 800274a:	4618      	mov	r0, r3
 800274c:	4621      	mov	r1, r4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f04f 0400 	mov.w	r4, #0
 8002754:	461a      	mov	r2, r3
 8002756:	4623      	mov	r3, r4
 8002758:	f7fd fd36 	bl	80001c8 <__aeabi_uldivmod>
 800275c:	4603      	mov	r3, r0
 800275e:	460c      	mov	r4, r1
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e049      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002764:	4b2f      	ldr	r3, [pc, #188]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	f04f 0400 	mov.w	r4, #0
 800276e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	ea03 0501 	and.w	r5, r3, r1
 800277a:	ea04 0602 	and.w	r6, r4, r2
 800277e:	4629      	mov	r1, r5
 8002780:	4632      	mov	r2, r6
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	f04f 0400 	mov.w	r4, #0
 800278a:	0154      	lsls	r4, r2, #5
 800278c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002790:	014b      	lsls	r3, r1, #5
 8002792:	4619      	mov	r1, r3
 8002794:	4622      	mov	r2, r4
 8002796:	1b49      	subs	r1, r1, r5
 8002798:	eb62 0206 	sbc.w	r2, r2, r6
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	f04f 0400 	mov.w	r4, #0
 80027a4:	0194      	lsls	r4, r2, #6
 80027a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027aa:	018b      	lsls	r3, r1, #6
 80027ac:	1a5b      	subs	r3, r3, r1
 80027ae:	eb64 0402 	sbc.w	r4, r4, r2
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	00e2      	lsls	r2, r4, #3
 80027bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027c0:	00d9      	lsls	r1, r3, #3
 80027c2:	460b      	mov	r3, r1
 80027c4:	4614      	mov	r4, r2
 80027c6:	195b      	adds	r3, r3, r5
 80027c8:	eb44 0406 	adc.w	r4, r4, r6
 80027cc:	f04f 0100 	mov.w	r1, #0
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	02a2      	lsls	r2, r4, #10
 80027d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027da:	0299      	lsls	r1, r3, #10
 80027dc:	460b      	mov	r3, r1
 80027de:	4614      	mov	r4, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	4621      	mov	r1, r4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f04f 0400 	mov.w	r4, #0
 80027ea:	461a      	mov	r2, r3
 80027ec:	4623      	mov	r3, r4
 80027ee:	f7fd fceb 	bl	80001c8 <__aeabi_uldivmod>
 80027f2:	4603      	mov	r3, r0
 80027f4:	460c      	mov	r4, r1
 80027f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	3301      	adds	r3, #1
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	60bb      	str	r3, [r7, #8]
      break;
 8002812:	e002      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002816:	60bb      	str	r3, [r7, #8]
      break;
 8002818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281a:	68bb      	ldr	r3, [r7, #8]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	00f42400 	.word	0x00f42400
 800282c:	007a1200 	.word	0x007a1200

08002830 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002854:	2b00      	cmp	r3, #0
 8002856:	d035      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002858:	4b62      	ldr	r3, [pc, #392]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800285e:	f7fd fe99 	bl	8000594 <HAL_GetTick>
 8002862:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002866:	f7fd fe95 	bl	8000594 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0b0      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002878:	4b5b      	ldr	r3, [pc, #364]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	019a      	lsls	r2, r3, #6
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	071b      	lsls	r3, r3, #28
 8002890:	4955      	ldr	r1, [pc, #340]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002898:	4b52      	ldr	r3, [pc, #328]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800289e:	f7fd fe79 	bl	8000594 <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028a6:	f7fd fe75 	bl	8000594 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e090      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028b8:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8083 	beq.w	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b44      	ldr	r3, [pc, #272]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a43      	ldr	r2, [pc, #268]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028ee:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a3e      	ldr	r2, [pc, #248]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028fa:	f7fd fe4b 	bl	8000594 <HAL_GetTick>
 80028fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7fd fe47 	bl	8000594 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e062      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002914:	4b35      	ldr	r3, [pc, #212]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002920:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002928:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02f      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	429a      	cmp	r2, r3
 800293c:	d028      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002948:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800294e:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d114      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002966:	f7fd fe15 	bl	8000594 <HAL_GetTick>
 800296a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fd fe11 	bl	8000594 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	; 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e02a      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ee      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800299c:	d10d      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b2:	490d      	ldr	r1, [pc, #52]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
 80029b8:	e005      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029c4:	6093      	str	r3, [r2, #8]
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d2:	4905      	ldr	r1, [pc, #20]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	42470068 	.word	0x42470068
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40007000 	.word	0x40007000
 80029f0:	42470e40 	.word	0x42470e40

080029f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d13d      	bne.n	8002a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a1a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d12f      	bne.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002a28:	617b      	str	r3, [r7, #20]
          break;
 8002a2a:	e02f      	b.n	8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a38:	d108      	bne.n	8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a42:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	e007      	b.n	8002a5c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a62:	099b      	lsrs	r3, r3, #6
 8002a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a76:	0f1b      	lsrs	r3, r3, #28
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	617b      	str	r3, [r7, #20]
          break;
 8002a84:	e002      	b.n	8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
          break;
 8002a8a:	bf00      	nop
        }
      }
      break;
 8002a8c:	bf00      	nop
    }
  }
  return frequency;
 8002a8e:	697b      	ldr	r3, [r7, #20]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	00bb8000 	.word	0x00bb8000
 8002aa4:	007a1200 	.word	0x007a1200
 8002aa8:	00f42400 	.word	0x00f42400

08002aac <main>:

uint8_t callback_state = 0;


int main(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af02      	add	r7, sp, #8
 HAL_Init();
 8002ab2:	f7fd fd09 	bl	80004c8 <HAL_Init>

  SystemClock_Config();
 8002ab6:	f000 f91f 	bl	8002cf8 <SystemClock_Config>

  MX_GPIO_Init();
 8002aba:	f000 f9f5 	bl	8002ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002abe:	f000 f9cb 	bl	8002e58 <MX_DMA_Init>
  MX_I2S2_Init();
 8002ac2:	f000 f99b 	bl	8002dfc <MX_I2S2_Init>

  //init FIR structure
  arm_fir_init_f32(&firsettings_l, FILTER_TAP_NUM, &filter_taps[0], &fir_l_state[0], BLOCK_SIZE_FLOAT);
 8002ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4b6d      	ldr	r3, [pc, #436]	; (8002c84 <main+0x1d8>)
 8002ace:	4a6e      	ldr	r2, [pc, #440]	; (8002c88 <main+0x1dc>)
 8002ad0:	2111      	movs	r1, #17
 8002ad2:	486e      	ldr	r0, [pc, #440]	; (8002c8c <main+0x1e0>)
 8002ad4:	f000 fcda 	bl	800348c <arm_fir_init_f32>
  arm_fir_init_f32(&firsettings_r, FILTER_TAP_NUM, &filter_taps[0], &fir_r_state[0], BLOCK_SIZE_FLOAT);
 8002ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4b6c      	ldr	r3, [pc, #432]	; (8002c90 <main+0x1e4>)
 8002ae0:	4a69      	ldr	r2, [pc, #420]	; (8002c88 <main+0x1dc>)
 8002ae2:	2111      	movs	r1, #17
 8002ae4:	486b      	ldr	r0, [pc, #428]	; (8002c94 <main+0x1e8>)
 8002ae6:	f000 fcd1 	bl	800348c <arm_fir_init_f32>



  //start i2s with 2048 samples transmission => 4096*u16 words
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 8002aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aee:	4a6a      	ldr	r2, [pc, #424]	; (8002c98 <main+0x1ec>)
 8002af0:	496a      	ldr	r1, [pc, #424]	; (8002c9c <main+0x1f0>)
 8002af2:	486b      	ldr	r0, [pc, #428]	; (8002ca0 <main+0x1f4>)
 8002af4:	f7fe fddc 	bl	80016b0 <HAL_I2SEx_TransmitReceive_DMA>
  int offset_r_ptr;
  int offset_w_ptr, w_ptr;

  while (1)
  {
	  if (callback_state != 0) {
 8002af8:	4b6a      	ldr	r3, [pc, #424]	; (8002ca4 <main+0x1f8>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0fb      	beq.n	8002af8 <main+0x4c>

		  //decide if it was half or cplt callback
		  if (callback_state == 1)   {
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <main+0x1f8>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d106      	bne.n	8002b16 <main+0x6a>
			  	  offset_r_ptr = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
			  	  offset_w_ptr = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
			  	  w_ptr = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e00c      	b.n	8002b30 <main+0x84>
			  }

		  else if (callback_state == 2) {
 8002b16:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <main+0x1f8>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d108      	bne.n	8002b30 <main+0x84>
			  offset_r_ptr = BLOCK_SIZE_U16;
 8002b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b22:	617b      	str	r3, [r7, #20]
			  offset_w_ptr = BLOCK_SIZE_FLOAT;
 8002b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b28:	613b      	str	r3, [r7, #16]
			  w_ptr = BLOCK_SIZE_FLOAT;
 8002b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b2e:	60fb      	str	r3, [r7, #12]
		  }


		  //restore input sample buffer to float array
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	e030      	b.n	8002b98 <main+0xec>
			  l_buf_in[w_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8002b36:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <main+0x1ec>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	3201      	adds	r2, #1
 8002b44:	4954      	ldr	r1, [pc, #336]	; (8002c98 <main+0x1ec>)
 8002b46:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b54:	4a54      	ldr	r2, [pc, #336]	; (8002ca8 <main+0x1fc>)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	edc3 7a00 	vstr	s15, [r3]
			  r_buf_in[w_ptr] = (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	3302      	adds	r3, #2
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <main+0x1ec>)
 8002b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	3203      	adds	r2, #3
 8002b70:	4949      	ldr	r1, [pc, #292]	; (8002c98 <main+0x1ec>)
 8002b72:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b80:	4a4a      	ldr	r2, [pc, #296]	; (8002cac <main+0x200>)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	edc3 7a00 	vstr	s15, [r3]
			  w_ptr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3304      	adds	r3, #4
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dbc8      	blt.n	8002b36 <main+0x8a>
		  }


		  //process FIR
		  arm_fir_f32 (&firsettings_l, &l_buf_in[offset_w_ptr], &l_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4a3f      	ldr	r2, [pc, #252]	; (8002ca8 <main+0x1fc>)
 8002baa:	1899      	adds	r1, r3, r2
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4a3f      	ldr	r2, [pc, #252]	; (8002cb0 <main+0x204>)
 8002bb2:	441a      	add	r2, r3
 8002bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb8:	4834      	ldr	r0, [pc, #208]	; (8002c8c <main+0x1e0>)
 8002bba:	f000 fc79 	bl	80034b0 <arm_fir_f32>
		  arm_fir_f32 (&firsettings_r, &r_buf_in[offset_w_ptr], &r_buf_out[offset_w_ptr],BLOCK_SIZE_FLOAT);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4a3a      	ldr	r2, [pc, #232]	; (8002cac <main+0x200>)
 8002bc4:	1899      	adds	r1, r3, r2
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4a3a      	ldr	r2, [pc, #232]	; (8002cb4 <main+0x208>)
 8002bcc:	441a      	add	r2, r3
 8002bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd2:	4830      	ldr	r0, [pc, #192]	; (8002c94 <main+0x1e8>)
 8002bd4:	f000 fc6c 	bl	80034b0 <arm_fir_f32>


		  //restore processed float-array to output sample-buffer
		  w_ptr = offset_w_ptr;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	60fb      	str	r3, [r7, #12]

		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	e046      	b.n	8002c70 <main+0x1c4>
				txBuf[i] =  (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <main+0x204>)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf2:	ee17 3a90 	vmov	r3, s15
 8002bf6:	0c1b      	lsrs	r3, r3, #16
 8002bf8:	b299      	uxth	r1, r3
 8002bfa:	4a28      	ldr	r2, [pc, #160]	; (8002c9c <main+0x1f0>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i+1] = ((int)l_buf_out[w_ptr])&0xFFFF;
 8002c02:	4a2b      	ldr	r2, [pc, #172]	; (8002cb0 <main+0x204>)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3301      	adds	r3, #1
 8002c16:	ee17 2a90 	vmov	r2, s15
 8002c1a:	b291      	uxth	r1, r2
 8002c1c:	4a1f      	ldr	r2, [pc, #124]	; (8002c9c <main+0x1f0>)
 8002c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i+2] = (((int)r_buf_out[w_ptr])>>16)&0xFFFF;
 8002c22:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <main+0x208>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c32:	ee17 3a90 	vmov	r3, s15
 8002c36:	0c1a      	lsrs	r2, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	b291      	uxth	r1, r2
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <main+0x1f0>)
 8002c40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i+3] = ((int)r_buf_out[w_ptr])&0xFFFF;
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <main+0x208>)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3303      	adds	r3, #3
 8002c58:	ee17 2a90 	vmov	r2, s15
 8002c5c:	b291      	uxth	r1, r2
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <main+0x1f0>)
 8002c60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				w_ptr++;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3301      	adds	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dbb2      	blt.n	8002be2 <main+0x136>
		  }

		  callback_state = 0;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <main+0x1f8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
	  if (callback_state != 0) {
 8002c82:	e739      	b.n	8002af8 <main+0x4c>
 8002c84:	2000708c 	.word	0x2000708c
 8002c88:	20000008 	.word	0x20000008
 8002c8c:	20000074 	.word	0x20000074
 8002c90:	2000798c 	.word	0x2000798c
 8002c94:	20007080 	.word	0x20007080
 8002c98:	20005080 	.word	0x20005080
 8002c9c:	20001080 	.word	0x20001080
 8002ca0:	200081cc 	.word	0x200081cc
 8002ca4:	2000006c 	.word	0x2000006c
 8002ca8:	20003080 	.word	0x20003080
 8002cac:	20008214 	.word	0x20008214
 8002cb0:	20004080 	.word	0x20004080
 8002cb4:	20000080 	.word	0x20000080

08002cb8 <HAL_I2SEx_TxRxHalfCpltCallback>:





void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

	callback_state = 1;
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]

}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	2000006c 	.word	0x2000006c

08002cd8 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]

}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	2000006c 	.word	0x2000006c

08002cf8 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b098      	sub	sp, #96	; 0x60
 8002cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d02:	2230      	movs	r2, #48	; 0x30
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fe5a 	bl	80039c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <SystemClock_Config+0xfc>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a30      	ldr	r2, [pc, #192]	; (8002df4 <SystemClock_Config+0xfc>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <SystemClock_Config+0xfc>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <SystemClock_Config+0x100>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <SystemClock_Config+0x100>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <SystemClock_Config+0x100>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d62:	2301      	movs	r3, #1
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d76:	2308      	movs	r3, #8
 8002d78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d7a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002d7e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d80:	2302      	movs	r3, #2
 8002d82:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d84:	2307      	movs	r3, #7
 8002d86:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f953 	bl	8002038 <HAL_RCC_OscConfig>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002d98:	f000 f9c2 	bl	8003120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002da0:	2302      	movs	r3, #2
 8002da2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002da8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	2105      	movs	r1, #5
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fb7e 	bl	80024bc <HAL_RCC_ClockConfig>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002dc6:	f000 f9ab 	bl	8003120 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002dce:	23c0      	movs	r3, #192	; 0xc0
 8002dd0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dd6:	f107 030c 	add.w	r3, r7, #12
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fd28 	bl	8002830 <HAL_RCCEx_PeriphCLKConfig>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002de6:	f000 f99b 	bl	8003120 <Error_Handler>
  }
}
 8002dea:	bf00      	nop
 8002dec:	3760      	adds	r7, #96	; 0x60
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40007000 	.word	0x40007000

08002dfc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <MX_I2S2_Init+0x58>)
 8002e04:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e16:	2203      	movs	r2, #3
 8002e18:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e20:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e24:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002e28:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <MX_I2S2_Init+0x54>)
 8002e3e:	f7fe f9f1 	bl	8001224 <HAL_I2S_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8002e48:	f000 f96a 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200081cc 	.word	0x200081cc
 8002e54:	40003800 	.word	0x40003800

08002e58 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <MX_DMA_Init+0x4c>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a0f      	ldr	r2, [pc, #60]	; (8002ea4 <MX_DMA_Init+0x4c>)
 8002e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <MX_DMA_Init+0x4c>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	200e      	movs	r0, #14
 8002e80:	f7fd fc6f 	bl	8000762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002e84:	200e      	movs	r0, #14
 8002e86:	f7fd fc88 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	200f      	movs	r0, #15
 8002e90:	f7fd fc67 	bl	8000762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002e94:	200f      	movs	r0, #15
 8002e96:	f7fd fc80 	bl	800079a <HAL_NVIC_EnableIRQ>

}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	4b90      	ldr	r3, [pc, #576]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a8f      	ldr	r2, [pc, #572]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002ec8:	f043 0310 	orr.w	r3, r3, #16
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b8d      	ldr	r3, [pc, #564]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	4b89      	ldr	r3, [pc, #548]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a88      	ldr	r2, [pc, #544]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b86      	ldr	r3, [pc, #536]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	4b82      	ldr	r3, [pc, #520]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a81      	ldr	r2, [pc, #516]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b7f      	ldr	r3, [pc, #508]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	4b7b      	ldr	r3, [pc, #492]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a7a      	ldr	r2, [pc, #488]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b78      	ldr	r3, [pc, #480]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4b74      	ldr	r3, [pc, #464]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a73      	ldr	r2, [pc, #460]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b71      	ldr	r3, [pc, #452]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	4b6d      	ldr	r3, [pc, #436]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a6c      	ldr	r2, [pc, #432]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f54:	f043 0308 	orr.w	r3, r3, #8
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	; (8003104 <MX_GPIO_Init+0x25c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2108      	movs	r1, #8
 8002f6a:	4867      	ldr	r0, [pc, #412]	; (8003108 <MX_GPIO_Init+0x260>)
 8002f6c:	f7fe f940 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002f70:	2200      	movs	r2, #0
 8002f72:	2101      	movs	r1, #1
 8002f74:	4865      	ldr	r0, [pc, #404]	; (800310c <MX_GPIO_Init+0x264>)
 8002f76:	f7fe f93b 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002f80:	4863      	ldr	r0, [pc, #396]	; (8003110 <MX_GPIO_Init+0x268>)
 8002f82:	f7fe f935 	bl	80011f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f86:	2308      	movs	r3, #8
 8002f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f96:	f107 031c 	add.w	r3, r7, #28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	485a      	ldr	r0, [pc, #360]	; (8003108 <MX_GPIO_Init+0x260>)
 8002f9e:	f7fd ff8d 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4854      	ldr	r0, [pc, #336]	; (800310c <MX_GPIO_Init+0x264>)
 8002fba:	f7fd ff7f 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fc2:	4b54      	ldr	r3, [pc, #336]	; (8003114 <MX_GPIO_Init+0x26c>)
 8002fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fca:	f107 031c 	add.w	r3, r7, #28
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4851      	ldr	r0, [pc, #324]	; (8003118 <MX_GPIO_Init+0x270>)
 8002fd2:	f7fd ff73 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fd6:	2310      	movs	r3, #16
 8002fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fe6:	2306      	movs	r3, #6
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	f107 031c 	add.w	r3, r7, #28
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4849      	ldr	r0, [pc, #292]	; (8003118 <MX_GPIO_Init+0x270>)
 8002ff2:	f7fd ff63 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ff6:	23e0      	movs	r3, #224	; 0xe0
 8002ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003006:	2305      	movs	r3, #5
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	4619      	mov	r1, r3
 8003010:	4841      	ldr	r0, [pc, #260]	; (8003118 <MX_GPIO_Init+0x270>)
 8003012:	f7fd ff53 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003016:	2304      	movs	r3, #4
 8003018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003022:	f107 031c 	add.w	r3, r7, #28
 8003026:	4619      	mov	r1, r3
 8003028:	483c      	ldr	r0, [pc, #240]	; (800311c <MX_GPIO_Init+0x274>)
 800302a:	f7fd ff47 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800302e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003032:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003034:	2301      	movs	r3, #1
 8003036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	4619      	mov	r1, r3
 8003046:	4832      	ldr	r0, [pc, #200]	; (8003110 <MX_GPIO_Init+0x268>)
 8003048:	f7fd ff38 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800304c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800305e:	2306      	movs	r3, #6
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003062:	f107 031c 	add.w	r3, r7, #28
 8003066:	4619      	mov	r1, r3
 8003068:	4828      	ldr	r0, [pc, #160]	; (800310c <MX_GPIO_Init+0x264>)
 800306a:	f7fd ff27 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800306e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003074:	2300      	movs	r3, #0
 8003076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4619      	mov	r1, r3
 8003082:	4825      	ldr	r0, [pc, #148]	; (8003118 <MX_GPIO_Init+0x270>)
 8003084:	f7fd ff1a 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003088:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800308c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003096:	2303      	movs	r3, #3
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800309a:	230a      	movs	r3, #10
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	f107 031c 	add.w	r3, r7, #28
 80030a2:	4619      	mov	r1, r3
 80030a4:	481c      	ldr	r0, [pc, #112]	; (8003118 <MX_GPIO_Init+0x270>)
 80030a6:	f7fd ff09 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030aa:	2320      	movs	r3, #32
 80030ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b6:	f107 031c 	add.w	r3, r7, #28
 80030ba:	4619      	mov	r1, r3
 80030bc:	4814      	ldr	r0, [pc, #80]	; (8003110 <MX_GPIO_Init+0x268>)
 80030be:	f7fd fefd 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80030c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80030c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030c8:	2312      	movs	r3, #18
 80030ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030cc:	2301      	movs	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030d4:	2304      	movs	r3, #4
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	4619      	mov	r1, r3
 80030de:	480f      	ldr	r0, [pc, #60]	; (800311c <MX_GPIO_Init+0x274>)
 80030e0:	f7fd feec 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030e4:	2302      	movs	r3, #2
 80030e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <MX_GPIO_Init+0x26c>)
 80030ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	4619      	mov	r1, r3
 80030f6:	4804      	ldr	r0, [pc, #16]	; (8003108 <MX_GPIO_Init+0x260>)
 80030f8:	f7fd fee0 	bl	8000ebc <HAL_GPIO_Init>

}
 80030fc:	bf00      	nop
 80030fe:	3730      	adds	r7, #48	; 0x30
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	40021000 	.word	0x40021000
 800310c:	40020800 	.word	0x40020800
 8003110:	40020c00 	.word	0x40020c00
 8003114:	10110000 	.word	0x10110000
 8003118:	40020000 	.word	0x40020000
 800311c:	40020400 	.word	0x40020400

08003120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_MspInit+0x4c>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4a0f      	ldr	r2, [pc, #60]	; (800317c <HAL_MspInit+0x4c>)
 8003140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_MspInit+0x4c>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_MspInit+0x4c>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	4a08      	ldr	r2, [pc, #32]	; (800317c <HAL_MspInit+0x4c>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003160:	6413      	str	r3, [r2, #64]	; 0x40
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_MspInit+0x4c>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800316e:	2007      	movs	r0, #7
 8003170:	f7fd faec 	bl	800074c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800

08003180 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a62      	ldr	r2, [pc, #392]	; (8003328 <HAL_I2S_MspInit+0x1a8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	f040 80be 	bne.w	8003320 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	4b60      	ldr	r3, [pc, #384]	; (800332c <HAL_I2S_MspInit+0x1ac>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	4a5f      	ldr	r2, [pc, #380]	; (800332c <HAL_I2S_MspInit+0x1ac>)
 80031ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b2:	6413      	str	r3, [r2, #64]	; 0x40
 80031b4:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_I2S_MspInit+0x1ac>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_I2S_MspInit+0x1ac>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	4a58      	ldr	r2, [pc, #352]	; (800332c <HAL_I2S_MspInit+0x1ac>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6313      	str	r3, [r2, #48]	; 0x30
 80031d0:	4b56      	ldr	r3, [pc, #344]	; (800332c <HAL_I2S_MspInit+0x1ac>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	4b52      	ldr	r3, [pc, #328]	; (800332c <HAL_I2S_MspInit+0x1ac>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	4a51      	ldr	r2, [pc, #324]	; (800332c <HAL_I2S_MspInit+0x1ac>)
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	6313      	str	r3, [r2, #48]	; 0x30
 80031ec:	4b4f      	ldr	r3, [pc, #316]	; (800332c <HAL_I2S_MspInit+0x1ac>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031f8:	2304      	movs	r3, #4
 80031fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	2300      	movs	r3, #0
 8003206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8003208:	2306      	movs	r3, #6
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4619      	mov	r1, r3
 8003212:	4847      	ldr	r0, [pc, #284]	; (8003330 <HAL_I2S_MspInit+0x1b0>)
 8003214:	f7fd fe52 	bl	8000ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003218:	2348      	movs	r3, #72	; 0x48
 800321a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003228:	2305      	movs	r3, #5
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4619      	mov	r1, r3
 8003232:	483f      	ldr	r0, [pc, #252]	; (8003330 <HAL_I2S_MspInit+0x1b0>)
 8003234:	f7fd fe42 	bl	8000ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003238:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800323c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800324a:	2305      	movs	r3, #5
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	4619      	mov	r1, r3
 8003254:	4837      	ldr	r0, [pc, #220]	; (8003334 <HAL_I2S_MspInit+0x1b4>)
 8003256:	f7fd fe31 	bl	8000ebc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 800325c:	4a37      	ldr	r2, [pc, #220]	; (800333c <HAL_I2S_MspInit+0x1bc>)
 800325e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8003260:	4b35      	ldr	r3, [pc, #212]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 8003262:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003266:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003268:	4b33      	ldr	r3, [pc, #204]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800326e:	4b32      	ldr	r3, [pc, #200]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 8003270:	2200      	movs	r2, #0
 8003272:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003274:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 8003276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800327a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800327c:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 800327e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003282:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003284:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 8003286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800328a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 800328e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003292:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003294:	4b28      	ldr	r3, [pc, #160]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 8003296:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800329a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800329c:	4b26      	ldr	r3, [pc, #152]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 800329e:	2200      	movs	r2, #0
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80032a2:	4825      	ldr	r0, [pc, #148]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 80032a4:	f7fd fa94 	bl	80007d0 <HAL_DMA_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 80032ae:	f7ff ff37 	bl	8003120 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b8:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <HAL_I2S_MspInit+0x1b8>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 80032c0:	4a20      	ldr	r2, [pc, #128]	; (8003344 <HAL_I2S_MspInit+0x1c4>)
 80032c2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80032c4:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 80032d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032dc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032de:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 80032e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 80032e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 80032f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 80032f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032fc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 8003300:	2200      	movs	r2, #0
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003304:	480e      	ldr	r0, [pc, #56]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 8003306:	f7fd fa63 	bl	80007d0 <HAL_DMA_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8003310:	f7ff ff06 	bl	8003120 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_I2S_MspInit+0x1c0>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003320:	bf00      	nop
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40003800 	.word	0x40003800
 800332c:	40023800 	.word	0x40023800
 8003330:	40020800 	.word	0x40020800
 8003334:	40020400 	.word	0x40020400
 8003338:	200078cc 	.word	0x200078cc
 800333c:	40026058 	.word	0x40026058
 8003340:	2000792c 	.word	0x2000792c
 8003344:	40026070 	.word	0x40026070

08003348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335a:	e7fe      	b.n	800335a <HardFault_Handler+0x4>

0800335c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <MemManage_Handler+0x4>

08003362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <BusFault_Handler+0x4>

08003368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800336c:	e7fe      	b.n	800336c <UsageFault_Handler+0x4>

0800336e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800339c:	f7fd f8e6 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80033a8:	4802      	ldr	r0, [pc, #8]	; (80033b4 <DMA1_Stream3_IRQHandler+0x10>)
 80033aa:	f7fd fb1f 	bl	80009ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200078cc 	.word	0x200078cc

080033b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <DMA1_Stream4_IRQHandler+0x10>)
 80033be:	f7fd fb15 	bl	80009ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	2000792c 	.word	0x2000792c

080033cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033d0:	4b16      	ldr	r3, [pc, #88]	; (800342c <SystemInit+0x60>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	4a15      	ldr	r2, [pc, #84]	; (800342c <SystemInit+0x60>)
 80033d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <SystemInit+0x64>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a12      	ldr	r2, [pc, #72]	; (8003430 <SystemInit+0x64>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <SystemInit+0x64>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <SystemInit+0x64>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <SystemInit+0x64>)
 80033f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <SystemInit+0x64>)
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <SystemInit+0x68>)
 8003406:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <SystemInit+0x64>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a08      	ldr	r2, [pc, #32]	; (8003430 <SystemInit+0x64>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003412:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <SystemInit+0x64>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800341a:	4b04      	ldr	r3, [pc, #16]	; (800342c <SystemInit+0x60>)
 800341c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003420:	609a      	str	r2, [r3, #8]
#endif
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00
 8003430:	40023800 	.word	0x40023800
 8003434:	24003010 	.word	0x24003010

08003438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003470 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800343c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800343e:	e003      	b.n	8003448 <LoopCopyDataInit>

08003440 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003442:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003444:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003446:	3104      	adds	r1, #4

08003448 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003448:	480b      	ldr	r0, [pc, #44]	; (8003478 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800344a:	4b0c      	ldr	r3, [pc, #48]	; (800347c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800344c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800344e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003450:	d3f6      	bcc.n	8003440 <CopyDataInit>
  ldr  r2, =_sbss
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003454:	e002      	b.n	800345c <LoopFillZerobss>

08003456 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003456:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003458:	f842 3b04 	str.w	r3, [r2], #4

0800345c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800345e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003460:	d3f9      	bcc.n	8003456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003462:	f7ff ffb3 	bl	80033cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003466:	f000 fa87 	bl	8003978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800346a:	f7ff fb1f 	bl	8002aac <main>
  bx  lr    
 800346e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003470:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8003474:	08003a10 	.word	0x08003a10
  ldr  r0, =_sdata
 8003478:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800347c:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 8003480:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 8003484:	20009214 	.word	0x20009214

08003488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003488:	e7fe      	b.n	8003488 <ADC_IRQHandler>
	...

0800348c <arm_fir_init_f32>:
 800348c:	b570      	push	{r4, r5, r6, lr}
 800348e:	9c04      	ldr	r4, [sp, #16]
 8003490:	6082      	str	r2, [r0, #8]
 8003492:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003496:	3c01      	subs	r4, #1
 8003498:	4605      	mov	r5, r0
 800349a:	440c      	add	r4, r1
 800349c:	8001      	strh	r1, [r0, #0]
 800349e:	461e      	mov	r6, r3
 80034a0:	00a2      	lsls	r2, r4, #2
 80034a2:	4618      	mov	r0, r3
 80034a4:	2100      	movs	r1, #0
 80034a6:	f000 fa8b 	bl	80039c0 <memset>
 80034aa:	606e      	str	r6, [r5, #4]
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
 80034ae:	bf00      	nop

080034b0 <arm_fir_f32>:
 80034b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	ed2d 8b10 	vpush	{d8-d15}
 80034b8:	b089      	sub	sp, #36	; 0x24
 80034ba:	4605      	mov	r5, r0
 80034bc:	9003      	str	r0, [sp, #12]
 80034be:	8800      	ldrh	r0, [r0, #0]
 80034c0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80034c4:	9304      	str	r3, [sp, #16]
 80034c6:	461e      	mov	r6, r3
 80034c8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80034cc:	3b01      	subs	r3, #1
 80034ce:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 80034d2:	08f3      	lsrs	r3, r6, #3
 80034d4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80034d8:	9001      	str	r0, [sp, #4]
 80034da:	4625      	mov	r5, r4
 80034dc:	9400      	str	r4, [sp, #0]
 80034de:	9302      	str	r3, [sp, #8]
 80034e0:	f000 81ee 	beq.w	80038c0 <arm_fir_f32+0x410>
 80034e4:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80034e8:	469e      	mov	lr, r3
 80034ea:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80034ee:	1f1e      	subs	r6, r3, #4
 80034f0:	4604      	mov	r4, r0
 80034f2:	9605      	str	r6, [sp, #20]
 80034f4:	eb08 0003 	add.w	r0, r8, r3
 80034f8:	f004 0a07 	and.w	sl, r4, #7
 80034fc:	4613      	mov	r3, r2
 80034fe:	f10c 0420 	add.w	r4, ip, #32
 8003502:	f8cd c018 	str.w	ip, [sp, #24]
 8003506:	4684      	mov	ip, r0
 8003508:	4648      	mov	r0, r9
 800350a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800350e:	9107      	str	r1, [sp, #28]
 8003510:	f105 0720 	add.w	r7, r5, #32
 8003514:	f101 0620 	add.w	r6, r1, #32
 8003518:	f102 0520 	add.w	r5, r2, #32
 800351c:	4652      	mov	r2, sl
 800351e:	469a      	mov	sl, r3
 8003520:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8003524:	f847 3c20 	str.w	r3, [r7, #-32]
 8003528:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800352c:	f847 3c1c 	str.w	r3, [r7, #-28]
 8003530:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8003534:	f847 3c18 	str.w	r3, [r7, #-24]
 8003538:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800353c:	f847 3c14 	str.w	r3, [r7, #-20]
 8003540:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8003544:	f847 3c10 	str.w	r3, [r7, #-16]
 8003548:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800354c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8003550:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8003554:	f847 3c08 	str.w	r3, [r7, #-8]
 8003558:	eddf 3af1 	vldr	s7, [pc, #964]	; 8003920 <arm_fir_f32+0x470>
 800355c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003560:	f847 3c04 	str.w	r3, [r7, #-4]
 8003564:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8003568:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800356c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8003570:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8003574:	ed14 1a04 	vldr	s2, [r4, #-16]
 8003578:	ed54 0a03 	vldr	s1, [r4, #-12]
 800357c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003580:	1f21      	subs	r1, r4, #4
 8003582:	eef0 8a63 	vmov.f32	s17, s7
 8003586:	eef0 9a63 	vmov.f32	s19, s7
 800358a:	eef0 aa63 	vmov.f32	s21, s7
 800358e:	eef0 ba63 	vmov.f32	s23, s7
 8003592:	eeb0 ca63 	vmov.f32	s24, s7
 8003596:	eef0 ca63 	vmov.f32	s25, s7
 800359a:	eeb0 da63 	vmov.f32	s26, s7
 800359e:	2800      	cmp	r0, #0
 80035a0:	f000 81e8 	beq.w	8003974 <arm_fir_f32+0x4c4>
 80035a4:	f108 0120 	add.w	r1, r8, #32
 80035a8:	f104 031c 	add.w	r3, r4, #28
 80035ac:	4683      	mov	fp, r0
 80035ae:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 80035b2:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 80035b6:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 80035ba:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 80035be:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 80035c2:	ed11 6a04 	vldr	s12, [r1, #-16]
 80035c6:	ed51 6a03 	vldr	s13, [r1, #-12]
 80035ca:	ed11 7a02 	vldr	s14, [r1, #-8]
 80035ce:	ed51 7a01 	vldr	s15, [r1, #-4]
 80035d2:	ee23 fa04 	vmul.f32	s30, s6, s8
 80035d6:	ee62 ea84 	vmul.f32	s29, s5, s8
 80035da:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 80035de:	ee22 ea04 	vmul.f32	s28, s4, s8
 80035e2:	ee61 da84 	vmul.f32	s27, s3, s8
 80035e6:	ee21 ba04 	vmul.f32	s22, s2, s8
 80035ea:	ee20 aa84 	vmul.f32	s20, s1, s8
 80035ee:	ee20 9a04 	vmul.f32	s18, s0, s8
 80035f2:	ee28 4a04 	vmul.f32	s8, s16, s8
 80035f6:	ee62 fa24 	vmul.f32	s31, s4, s9
 80035fa:	ee3c ca0e 	vadd.f32	s24, s24, s28
 80035fe:	ee7b baad 	vadd.f32	s23, s23, s27
 8003602:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8003606:	ee61 da24 	vmul.f32	s27, s2, s9
 800360a:	ee7a aa8b 	vadd.f32	s21, s21, s22
 800360e:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8003612:	ee20 baa4 	vmul.f32	s22, s1, s9
 8003616:	ee20 aa24 	vmul.f32	s20, s0, s9
 800361a:	ee3d da0f 	vadd.f32	s26, s26, s30
 800361e:	ee7c caae 	vadd.f32	s25, s25, s29
 8003622:	ee22 faa4 	vmul.f32	s30, s5, s9
 8003626:	ee78 8a89 	vadd.f32	s17, s17, s18
 800362a:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 800362e:	ee28 9a24 	vmul.f32	s18, s16, s9
 8003632:	ee73 3a84 	vadd.f32	s7, s7, s8
 8003636:	ee63 4a24 	vmul.f32	s9, s6, s9
 800363a:	ee22 4a05 	vmul.f32	s8, s4, s10
 800363e:	ee61 ea05 	vmul.f32	s29, s2, s10
 8003642:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8003646:	ee3d da0f 	vadd.f32	s26, s26, s30
 800364a:	ee7c caaf 	vadd.f32	s25, s25, s31
 800364e:	ee20 fa85 	vmul.f32	s30, s1, s10
 8003652:	ee61 fa85 	vmul.f32	s31, s3, s10
 8003656:	ee3c ea0e 	vadd.f32	s28, s24, s28
 800365a:	ee7b daad 	vadd.f32	s27, s23, s27
 800365e:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8003662:	ee60 ba05 	vmul.f32	s23, s0, s10
 8003666:	ee68 aa05 	vmul.f32	s21, s16, s10
 800366a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 800366e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003672:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8003676:	ee63 4a05 	vmul.f32	s9, s6, s10
 800367a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800367e:	ee21 9a25 	vmul.f32	s18, s2, s11
 8003682:	ee20 ca25 	vmul.f32	s24, s0, s11
 8003686:	ee3d da04 	vadd.f32	s26, s26, s8
 800368a:	ee7c caaf 	vadd.f32	s25, s25, s31
 800368e:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8003692:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8003696:	ed53 1a04 	vldr	s3, [r3, #-16]
 800369a:	ee60 eaa5 	vmul.f32	s29, s1, s11
 800369e:	ee7d da8f 	vadd.f32	s27, s27, s30
 80036a2:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80036a6:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80036aa:	ee68 ba25 	vmul.f32	s23, s16, s11
 80036ae:	ee63 aa25 	vmul.f32	s21, s6, s11
 80036b2:	ee78 8aa4 	vadd.f32	s17, s17, s9
 80036b6:	ee73 3a85 	vadd.f32	s7, s7, s10
 80036ba:	ee22 5aa5 	vmul.f32	s10, s5, s11
 80036be:	ee62 5a25 	vmul.f32	s11, s4, s11
 80036c2:	ee61 4a06 	vmul.f32	s9, s2, s12
 80036c6:	ee60 9a86 	vmul.f32	s19, s1, s12
 80036ca:	ee60 fa06 	vmul.f32	s31, s0, s12
 80036ce:	ed13 1a03 	vldr	s2, [r3, #-12]
 80036d2:	ee23 fa06 	vmul.f32	s30, s6, s12
 80036d6:	ee3d da04 	vadd.f32	s26, s26, s8
 80036da:	ee7c ca89 	vadd.f32	s25, s25, s18
 80036de:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80036e2:	ee28 9a06 	vmul.f32	s18, s16, s12
 80036e6:	ee7d da8c 	vadd.f32	s27, s27, s24
 80036ea:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80036ee:	ee22 ca86 	vmul.f32	s24, s5, s12
 80036f2:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80036f6:	ee78 8a85 	vadd.f32	s17, s17, s10
 80036fa:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80036fe:	ee62 5a06 	vmul.f32	s11, s4, s12
 8003702:	ee21 6a86 	vmul.f32	s12, s3, s12
 8003706:	ee20 4a26 	vmul.f32	s8, s0, s13
 800370a:	ee63 ea26 	vmul.f32	s29, s6, s13
 800370e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8003712:	ee22 5a26 	vmul.f32	s10, s4, s13
 8003716:	ee3d da24 	vadd.f32	s26, s26, s9
 800371a:	ee7c caa9 	vadd.f32	s25, s25, s19
 800371e:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8003722:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8003726:	ed53 0a02 	vldr	s1, [r3, #-8]
 800372a:	ee68 fa26 	vmul.f32	s31, s16, s13
 800372e:	ee7d da89 	vadd.f32	s27, s27, s18
 8003732:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8003736:	ee78 8aa5 	vadd.f32	s17, s17, s11
 800373a:	ee22 faa6 	vmul.f32	s30, s5, s13
 800373e:	ee73 3a86 	vadd.f32	s7, s7, s12
 8003742:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8003746:	ee61 6a26 	vmul.f32	s13, s2, s13
 800374a:	ee60 aa07 	vmul.f32	s21, s0, s14
 800374e:	ee28 ca07 	vmul.f32	s24, s16, s14
 8003752:	ee63 ba07 	vmul.f32	s23, s6, s14
 8003756:	ee7a 9a05 	vadd.f32	s19, s20, s10
 800375a:	ee78 8a86 	vadd.f32	s17, s17, s12
 800375e:	ee3d da24 	vadd.f32	s26, s26, s9
 8003762:	ee7c ca84 	vadd.f32	s25, s25, s8
 8003766:	ee7d daae 	vadd.f32	s27, s27, s29
 800376a:	ee22 9a07 	vmul.f32	s18, s4, s14
 800376e:	ee62 ea87 	vmul.f32	s29, s5, s14
 8003772:	ee61 5a87 	vmul.f32	s11, s3, s14
 8003776:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800377a:	ed13 0a01 	vldr	s0, [r3, #-4]
 800377e:	ee61 6a07 	vmul.f32	s13, s2, s14
 8003782:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8003786:	ee3b ba0f 	vadd.f32	s22, s22, s30
 800378a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800378e:	ee68 4a27 	vmul.f32	s9, s16, s15
 8003792:	ee3d da2a 	vadd.f32	s26, s26, s21
 8003796:	ee7c ca8c 	vadd.f32	s25, s25, s24
 800379a:	ee23 8a27 	vmul.f32	s16, s6, s15
 800379e:	ee3e ea2b 	vadd.f32	s28, s28, s23
 80037a2:	ee22 4aa7 	vmul.f32	s8, s5, s15
 80037a6:	ee22 aa27 	vmul.f32	s20, s4, s15
 80037aa:	ee21 5aa7 	vmul.f32	s10, s3, s15
 80037ae:	ee21 6a27 	vmul.f32	s12, s2, s15
 80037b2:	ee78 6aa6 	vadd.f32	s13, s17, s13
 80037b6:	ee7d daae 	vadd.f32	s27, s27, s29
 80037ba:	ee60 8aa7 	vmul.f32	s17, s1, s15
 80037be:	ee3b ba09 	vadd.f32	s22, s22, s18
 80037c2:	ee79 9aa5 	vadd.f32	s19, s19, s11
 80037c6:	ee73 3a87 	vadd.f32	s7, s7, s14
 80037ca:	ee60 7a27 	vmul.f32	s15, s0, s15
 80037ce:	f1bb 0b01 	subs.w	fp, fp, #1
 80037d2:	f101 0120 	add.w	r1, r1, #32
 80037d6:	ee3d da24 	vadd.f32	s26, s26, s9
 80037da:	ee7c ca88 	vadd.f32	s25, s25, s16
 80037de:	ee3e ca04 	vadd.f32	s24, s28, s8
 80037e2:	ee7d ba8a 	vadd.f32	s23, s27, s20
 80037e6:	ee7b aa05 	vadd.f32	s21, s22, s10
 80037ea:	ee79 9a86 	vadd.f32	s19, s19, s12
 80037ee:	ee76 8aa8 	vadd.f32	s17, s13, s17
 80037f2:	ee73 3aa7 	vadd.f32	s7, s7, s15
 80037f6:	f103 0320 	add.w	r3, r3, #32
 80037fa:	f47f aed8 	bne.w	80035ae <arm_fir_f32+0xfe>
 80037fe:	eb09 0104 	add.w	r1, r9, r4
 8003802:	46e3      	mov	fp, ip
 8003804:	b3a2      	cbz	r2, 8003870 <arm_fir_f32+0x3c0>
 8003806:	4613      	mov	r3, r2
 8003808:	ecbb 6a01 	vldmia	fp!, {s12}
 800380c:	ecf1 7a01 	vldmia	r1!, {s15}
 8003810:	ee23 3a06 	vmul.f32	s6, s6, s12
 8003814:	ee22 4a86 	vmul.f32	s8, s5, s12
 8003818:	ee62 4a06 	vmul.f32	s9, s4, s12
 800381c:	ee21 5a86 	vmul.f32	s10, s3, s12
 8003820:	ee61 5a06 	vmul.f32	s11, s2, s12
 8003824:	ee60 6a86 	vmul.f32	s13, s1, s12
 8003828:	ee20 7a06 	vmul.f32	s14, s0, s12
 800382c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8003830:	3b01      	subs	r3, #1
 8003832:	ee3d da03 	vadd.f32	s26, s26, s6
 8003836:	ee7c ca84 	vadd.f32	s25, s25, s8
 800383a:	eeb0 3a62 	vmov.f32	s6, s5
 800383e:	ee3c ca24 	vadd.f32	s24, s24, s9
 8003842:	eef0 2a42 	vmov.f32	s5, s4
 8003846:	ee7b ba85 	vadd.f32	s23, s23, s10
 800384a:	eeb0 2a61 	vmov.f32	s4, s3
 800384e:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8003852:	eef0 1a41 	vmov.f32	s3, s2
 8003856:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800385a:	eeb0 1a60 	vmov.f32	s2, s1
 800385e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8003862:	eef0 0a40 	vmov.f32	s1, s0
 8003866:	ee73 3a86 	vadd.f32	s7, s7, s12
 800386a:	eeb0 0a67 	vmov.f32	s0, s15
 800386e:	d1cb      	bne.n	8003808 <arm_fir_f32+0x358>
 8003870:	f1be 0e01 	subs.w	lr, lr, #1
 8003874:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8003878:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 800387c:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8003880:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8003884:	ed45 aa04 	vstr	s21, [r5, #-16]
 8003888:	ed45 9a03 	vstr	s19, [r5, #-12]
 800388c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8003890:	ed45 3a01 	vstr	s7, [r5, #-4]
 8003894:	f107 0720 	add.w	r7, r7, #32
 8003898:	f106 0620 	add.w	r6, r6, #32
 800389c:	f104 0420 	add.w	r4, r4, #32
 80038a0:	f105 0520 	add.w	r5, r5, #32
 80038a4:	f47f ae3c 	bne.w	8003520 <arm_fir_f32+0x70>
 80038a8:	9b02      	ldr	r3, [sp, #8]
 80038aa:	9800      	ldr	r0, [sp, #0]
 80038ac:	f8dd c018 	ldr.w	ip, [sp, #24]
 80038b0:	9907      	ldr	r1, [sp, #28]
 80038b2:	015b      	lsls	r3, r3, #5
 80038b4:	4652      	mov	r2, sl
 80038b6:	4418      	add	r0, r3
 80038b8:	9000      	str	r0, [sp, #0]
 80038ba:	4419      	add	r1, r3
 80038bc:	449c      	add	ip, r3
 80038be:	441a      	add	r2, r3
 80038c0:	9b04      	ldr	r3, [sp, #16]
 80038c2:	f013 0e07 	ands.w	lr, r3, #7
 80038c6:	d01f      	beq.n	8003908 <arm_fir_f32+0x458>
 80038c8:	9f00      	ldr	r7, [sp, #0]
 80038ca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80038ce:	4676      	mov	r6, lr
 80038d0:	4665      	mov	r5, ip
 80038d2:	f851 3b04 	ldr.w	r3, [r1], #4
 80038d6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003920 <arm_fir_f32+0x470>
 80038da:	f847 3b04 	str.w	r3, [r7], #4
 80038de:	4644      	mov	r4, r8
 80038e0:	464b      	mov	r3, r9
 80038e2:	4628      	mov	r0, r5
 80038e4:	ecb0 7a01 	vldmia	r0!, {s14}
 80038e8:	ecf4 7a01 	vldmia	r4!, {s15}
 80038ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f0:	3b01      	subs	r3, #1
 80038f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038f6:	d1f5      	bne.n	80038e4 <arm_fir_f32+0x434>
 80038f8:	3e01      	subs	r6, #1
 80038fa:	ece2 6a01 	vstmia	r2!, {s13}
 80038fe:	f105 0504 	add.w	r5, r5, #4
 8003902:	d1e6      	bne.n	80038d2 <arm_fir_f32+0x422>
 8003904:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8003908:	9b01      	ldr	r3, [sp, #4]
 800390a:	1e59      	subs	r1, r3, #1
 800390c:	9b03      	ldr	r3, [sp, #12]
 800390e:	088e      	lsrs	r6, r1, #2
 8003910:	685c      	ldr	r4, [r3, #4]
 8003912:	d020      	beq.n	8003956 <arm_fir_f32+0x4a6>
 8003914:	f104 0210 	add.w	r2, r4, #16
 8003918:	f10c 0310 	add.w	r3, ip, #16
 800391c:	4630      	mov	r0, r6
 800391e:	e001      	b.n	8003924 <arm_fir_f32+0x474>
 8003920:	00000000 	.word	0x00000000
 8003924:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8003928:	f842 5c10 	str.w	r5, [r2, #-16]
 800392c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8003930:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003934:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8003938:	f842 5c08 	str.w	r5, [r2, #-8]
 800393c:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8003940:	f842 5c04 	str.w	r5, [r2, #-4]
 8003944:	3801      	subs	r0, #1
 8003946:	f103 0310 	add.w	r3, r3, #16
 800394a:	f102 0210 	add.w	r2, r2, #16
 800394e:	d1e9      	bne.n	8003924 <arm_fir_f32+0x474>
 8003950:	0133      	lsls	r3, r6, #4
 8003952:	441c      	add	r4, r3
 8003954:	449c      	add	ip, r3
 8003956:	f011 0303 	ands.w	r3, r1, #3
 800395a:	d006      	beq.n	800396a <arm_fir_f32+0x4ba>
 800395c:	4622      	mov	r2, r4
 800395e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003962:	f842 1b04 	str.w	r1, [r2], #4
 8003966:	3b01      	subs	r3, #1
 8003968:	d1f9      	bne.n	800395e <arm_fir_f32+0x4ae>
 800396a:	b009      	add	sp, #36	; 0x24
 800396c:	ecbd 8b10 	vpop	{d8-d15}
 8003970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003974:	46c3      	mov	fp, r8
 8003976:	e745      	b.n	8003804 <arm_fir_f32+0x354>

08003978 <__libc_init_array>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	4e0d      	ldr	r6, [pc, #52]	; (80039b0 <__libc_init_array+0x38>)
 800397c:	4c0d      	ldr	r4, [pc, #52]	; (80039b4 <__libc_init_array+0x3c>)
 800397e:	1ba4      	subs	r4, r4, r6
 8003980:	10a4      	asrs	r4, r4, #2
 8003982:	2500      	movs	r5, #0
 8003984:	42a5      	cmp	r5, r4
 8003986:	d109      	bne.n	800399c <__libc_init_array+0x24>
 8003988:	4e0b      	ldr	r6, [pc, #44]	; (80039b8 <__libc_init_array+0x40>)
 800398a:	4c0c      	ldr	r4, [pc, #48]	; (80039bc <__libc_init_array+0x44>)
 800398c:	f000 f820 	bl	80039d0 <_init>
 8003990:	1ba4      	subs	r4, r4, r6
 8003992:	10a4      	asrs	r4, r4, #2
 8003994:	2500      	movs	r5, #0
 8003996:	42a5      	cmp	r5, r4
 8003998:	d105      	bne.n	80039a6 <__libc_init_array+0x2e>
 800399a:	bd70      	pop	{r4, r5, r6, pc}
 800399c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039a0:	4798      	blx	r3
 80039a2:	3501      	adds	r5, #1
 80039a4:	e7ee      	b.n	8003984 <__libc_init_array+0xc>
 80039a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039aa:	4798      	blx	r3
 80039ac:	3501      	adds	r5, #1
 80039ae:	e7f2      	b.n	8003996 <__libc_init_array+0x1e>
 80039b0:	08003a08 	.word	0x08003a08
 80039b4:	08003a08 	.word	0x08003a08
 80039b8:	08003a08 	.word	0x08003a08
 80039bc:	08003a0c 	.word	0x08003a0c

080039c0 <memset>:
 80039c0:	4402      	add	r2, r0
 80039c2:	4603      	mov	r3, r0
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d100      	bne.n	80039ca <memset+0xa>
 80039c8:	4770      	bx	lr
 80039ca:	f803 1b01 	strb.w	r1, [r3], #1
 80039ce:	e7f9      	b.n	80039c4 <memset+0x4>

080039d0 <_init>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr

080039dc <_fini>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	bf00      	nop
 80039e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e2:	bc08      	pop	{r3}
 80039e4:	469e      	mov	lr, r3
 80039e6:	4770      	bx	lr
